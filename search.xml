<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【CSS布局】-垂直水平居中-学习笔记]]></title>
    <url>%2F2019%2F08%2F25%2Fcss%E5%B8%83%E5%B1%80-%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[参考GitHub项目： https://github.com/Sweet-KK/css-layout wiki： https://www.sweet-kk.top/css-layout/#/ 实例： https://www.sweet-kk.top/css-layout-demo/html/index.html 垂直水平居中ヾ(◍°∇°◍)ﾉﾞ注：本文是上述GitHub项目的学习笔记 [TOC] 1、行内/行内块级/图片text-align控制行内内容相对于块父元素水平居中；line-height和vertical-align使垂直居中，font-size是消除近似居中的bug。12345678910#parent &#123; height： 100px; line-height: 100px; /*行高和height等值*/ text-align: center; /*水平居中*/ font-size: 0;&#125;#son &#123; display: inline-block; /*块级元素需改为行内或行内块级*/ vertical-align: middle;&#125; 2、table-cell原理：CSS Table，使表格内容垂直对齐方式为middle,然后根据是行内内容还是块级内容采取不同的方式达到水平居中 123456789101112#parent&#123;height: 150px;width: 200px;display: table-cell;vertical-align: middle;/*text-align: center;*/ /*如果是行内元素就添加这个*/&#125;#son&#123;/*margin: 0 auto;*/ /*如果是块级元素就添加这个*/width: 100px;height: 50px;&#125; 3、button作为父元素原理：button的默认样式，再把需要居中的元素表现形式改为行内或行内块级就好123456789button#parent&#123; /*改掉button默认样式就好了,不需要居中处理*/height: 150px;width: 200px;outline: none;border: none;&#125;#son&#123; display: inline-block; /*button自带text-align: center,改为行内水平居中生效*/&#125; * 优点：简单方便，充分利用默认样式 * 缺点：只适用于行内内容；需要清除部分默认样式；水平垂直居中兼容性很好，但是ie下点击会有凹陷效果！ 4、绝对定位原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到几何上的水平垂直居中1234567#parent &#123;position: relative;&#125;#son &#123;position: absolute;top: 50%;left: 50%;transform: translate(-50%,-50%);/*定宽高时=margin-left:负自身宽度的一半；margin-top:负自身高度的一半*/&#125; * 优点：使用margin兼容性好；不管是块级还是行内元素都可以实现 * 缺点：代码较多；脱离文档流；使用margin需要知道宽高；使用transform兼容性不好（ie9+） 5、绝对居中原理：当top、bottom为0时,margin-top&amp;bottom设置auto的话会无限延伸占满空间并且平分；当left、right为0时,margin-left&amp;right设置auto的话会无限延伸占满空间并且平分12345678910#parent&#123;position: relative;&#125;#son&#123;position: absolute;margin: auto;width: 100px;height: 50px;top: 0;bottom: 0;left: 0;right: 0; &#125; * 优点：无需关注宽高；兼容性较好(ie8+) * 缺点：代码较多；脱离文档流 6、flex设置排列方式、对齐方式123456789101112131415#parent&#123;display: flex;&#125;#son&#123;margin: auto;&#125;或#parent&#123;display: flex;justify-content: center;/*水平向*/align-items: center; &#125; /*垂直向*/或#parent&#123;display: flex;justify-content: center;&#125;#son&#123;align-self: center;&#125; 7、视窗居中原理：vh为视口单位，视口即文档可视的部分，50vh就是视口高度的50/100，设置50vh上边距1234#box &#123;/*0如果去掉，则会多出滚动条并且上下都是50vh的margin。如果去掉就给body加上overflow:hidden;*/margin: 50vh auto 0;transform: translateY(-50%); &#125; 总结：* 绝对定位：子绝父相，子元素再用transform移动-50% * 绝对居中：子绝父相，子元素margin: auto;偏移属性均设0.用margin撑开。 * 行内/行内块级/图片：父元素text-align:center（水平居中）；line-height：height值；font-size：0（消除不完全居中bug）；子元素vertical-align: middle; display:inline-block; * flex.父元素display: flex; 子元素margin: auto 或者父元素display:flex; justify-content:center;align-items:center;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS布局】-我理解的position]]></title>
    <url>%2F2019%2F08%2F22%2F%E3%80%90CSS%E3%80%91%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84position%2F</url>
    <content type="text"><![CDATA[[TOC] 注：本文是《CSS权威指南》的学习笔记@[toc]position：用于定位 static：元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。 relative：元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。 absolute：元素框从文档流中完全删除，并相对于其包含块定位，包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像该元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。 fixed：元素框的表现类似于将position设置为absolute，不过其包含块是视窗本身。 包含块： 偏移属性：定位元素各边相对于其包含块的偏移。 总结绝对定位：absolute元素绝对定位时，会从文档流中完全删除，然后相对于其包含块定位，其边界根据偏移属性放置。定位元素不会流入其他元素的内容，反之亦然，这说明，决定对定位元素可能覆盖其他元素或者被其他元素覆盖。 绝对定位元素的包含块是最近的position值不为static的祖先元素。通常会选择一个元素作为绝对定位元素的包含块，将其position指定为relative而且没有偏移。 绝对定位元素的top、left、right设置为auto，则会按照元素在正常流中原本的位置放置，但是会与其他元素发生重叠。 固定定位：fixed固定定位与绝对定位类似，但是固定元素的包含块是视窗。固定定位时，元素会完全从文档流中去除，不会有相对于文档中任何部分的位置。 相对定位：relative保留元素在原来文档中的位置。1span &#123;position: relative; top: 10px; bottom: 20px;&#125; 遇到这种情况时bottom会reset成 -top即 bottom： -10px;1span &#123;position: relative; top: 10px; bottom: -10px;&#125;即bottom: -10px等同于top: 10px; 12从左到右读的语言里，重置right = (-left) 即right: -10px;等同于 left: 10px;从右往左读的语言里，重置left = (-right)]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS布局】-全屏布局]]></title>
    <url>%2F2019%2F08%2F21%2F%E3%80%90CSS%E5%B8%83%E5%B1%80%E3%80%91-%E5%85%A8%E5%B1%8F%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[全屏布局： 1、position：absolute123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head lang=&quot;zh-CN&quot;&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;全屏布局position&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; html,body,.content&#123; height: 100%; &#125; .top &#123; position: absolute; height: 50px; left: 0; right: 0; background-color: #4285F6; &#125; .left &#123; position: absolute; top: 50px; left: 0; bottom: 50px; width: 200px; background-color: #E5B07C; &#125; .right &#123; position: absolute; overflow: auto; left: 200px; right: 0; top: 50px; bottom: 50px; background-color: #E45F47; &#125; .bottom &#123; position: absolute; height: 50px; left: 0; right: 0; bottom: 0; background-color: #4285F6; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;top&quot;&gt;top&lt;/div&gt; &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt; &lt;div class=&quot;bottom&quot;&gt;bottom&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 2、flex12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head lang=&quot;zh-CN&quot;&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;全屏布局flex&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; html,body,.content&#123; height: 100%; &#125; .content &#123; display: flex; flex-direction: column; &#125; .top &#123; height: 50px; background-color: #4285F6; &#125; .bottom &#123; height: 50px; background-color: #4285F6; &#125; .middle &#123; flex: 1; display: flex; &#125; .left &#123; width: 200px; background-color: #E5B07C; &#125; .right &#123; flex: 1; overflow: auto; background-color: #E45F47; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;top&quot;&gt;top&lt;/div&gt; &lt;div class=&quot;middle&quot;&gt; &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;bottom&quot;&gt;bottom&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS】-我理解的float]]></title>
    <url>%2F2019%2F08%2F20%2F%E3%80%90CSS%E3%80%91%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84float%2F</url>
    <content type="text"><![CDATA[[TOC] 注： 文本是《CSS权威指南》的学习笔记 定义浮动float： 比如浮动图片，使周围的文字包围它1&lt;img src=&quot;b4.jpg&quot; style=&quot;float: left;&quot; alt=&quot;b4&quot;&gt; 浮动元素，会以某种方式将浮动元素从文档的正常流中删除，不过它还是会影响布局。 一个元素浮动时，其他内容会环绕该元素。 浮动元素周围的外边距不会合并（水平向、垂直向） float：none;用于防止元素浮动。 浮动元素的包含块是其最近的块级祖先元素。 浮动元素会生成一个块级框，而不论这个元素本身是什么。它会像块级元素一样表现。所以没必要对浮动元素声明display: block; 重叠时 行内框（如strong）与一个浮动元素重叠时，其边框、背景、内容都在该浮动元素之上显示。 块框（如p）与一个浮动元素重叠时，边框和背景在下面，但是内容在该浮动元素上面显示。1234567891011img.sideline &#123;float: left; margin: 10px -15px 10px 10px;&#125; p.box &#123;border: 1px solid gray; padding: 0.5em;&#125; p.box strong &#123;border: 3px double black; background: silver; padding: 2px;&#125; h2#jump-up &#123;margin-top: -15px;background: silver; &#125;&lt;div&gt; &lt;img src=&quot;images/mao.jpg&quot; class=&quot;sideline&quot;&gt; &lt;p class=&quot;box&quot;&gt;This iparagrapf, , underremarkableThis iparagrapf, underremarkableThis iparagrapf, underremarkableunderremarkable in most ways, does contain&lt;strong&gt;bbbsbsjhdjh strongly contain text&lt;/strong&gt;aaaaaa&lt;/p&gt; &lt;p&gt; This is a second paragraph &lt;/p&gt; &lt;h2 id=&quot;jump-up&quot;&gt;a heading!&lt;/h2&gt;&lt;/div&gt; 清除浮动: clear1clear属性 h2&#123;clear：left;&#125; clear: both; 确保该元素不与任何浮动元素在同一行上。 clear: none; 允许两边有浮动元素，可以用来覆盖其他样式。 css1\css2增加清除元素的上外边距。css2.1增加了一个清除区域，但是不改变外边距。加的这个清除区域使得清除元素刚好位于浮动元素的下面。no separation 浮动元素底端和清除元素顶端之间如果需要有间隔，那么设置浮动元素的margin-bottom 浮动规则1、 浮动元素的左（或右）外边界不能超出其包含块的左（或右）内边界。2、浮动元素的左（或右）外边界必须是源文档之前出现的左浮动（或右浮动）元素的右（左）外边界，除非后出现浮动元素的顶端在先出现浮动元素的底端下面。（防止浮动元素彼此覆盖3、左浮动元素的右外边界不会在其右边右浮动元素的左外边界的右边；一个右浮动元素的左外边界不会在其左边任何左浮动元素的右外边界的右边4、一个浮动元素的顶端不会比其父元素的内顶端更高。如果一个浮动元素在两个合并外边距之间，放置这个浮动元素时就好像在两个元素之间有一个块级父元素。 5、浮动元素的顶端不能比之前所有浮动元素或块级元素的顶端更高。 6、如果源文档中一个浮动元素之前出现另一个元素，浮动元素的顶端不能比包含该元素所生成框的任何行框的顶端更高。– 限制元素的向上浮动 7、左（或右）浮动元素的左边（右边）有另一个浮动元素，前者的you外边界不能在其包含块的右（左）边界的右边（左边）。 浮动元素不能超出其包含元素的边界，除非它太宽，本身都放不下。 可防止出现：多个浮动元素出现在一个水平行上，远远超出其包含块的边界。 如果没有足够的空间，浮动元素会被挤到一个新的行上。8、浮动元素必须尽可能高地放置。 9、左浮动元素必须向左尽可能远，右浮动元素必须向右尽可能远。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS布局-水平居中-学习笔记]]></title>
    <url>%2F2019%2F08%2F19%2F%5BCSS%E5%B8%83%E5%B1%80%5D-%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[W3.org官方网站： https://www.w3.org/TR/CSS21/visudet.html#Computing_widths_and_margins参考GitHub项目： https://github.com/Sweet-KK/css-layout wiki： https://www.sweet-kk.top/css-layout/#/ 实例： https://www.sweet-kk.top/css-layout-demo/html/index.html [TOC] text-align控制行内内容（==文字==、==行内元素==、==行内块级元素==）如何相对它的块父元素对齐text-align只应用于块级元素的内联内容，所以把元素的text-align设为center不能将该元素居中。比如：1234567891011&lt;div id=&quot;parent&quot;&gt; &lt;div id=&quot;son1&quot;&gt; &lt;h1&gt;Test&lt;/h1&gt; &lt;p&gt; This is paragraph text, but you kenw that, Whinthin tne content of this paragraph floated. &lt;img src=&quot;images/xiamu.jpg&quot; style=&quot;float: left;&quot; alt=&quot;xiamu&quot;&gt; The containing block for the floated image is the paragraph. &lt;img src=&quot;images/mao.jpg&quot; style=&quot;float: right;&quot; alt=&quot;mao&quot;&gt; &lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 12345678910#parent &#123; text-align: center; width: 100px;&#125;#son1 &#123; width: 600px;&#125;img &#123; max-width: 20%;&#125; 效果如图：如果#parent选择器加一行float: right;则会变成下图。所以充分说明它是相对于父元素的。如果图片没有浮动，则按照文档流依次排列 单个块级元素margin-left和margin-right设置为相等的长度eg: p { width: 100px; margin-left: auto; margin-right: auto; }1234#son &#123; width: 20px;//定宽，值不能为auto且宽度小于父元素。要不然的话，宽度和父元素一样。 margin: 0 auto;&#125; 多个块级元素1234&lt;div style=&quot;height: 100px; width: 100px; background: silver; text-align: center;&quot;&gt; &lt;div style=&quot;height: 30px; width: 20px; background: #991231; display: inline-block;&quot;&gt;&lt;/div&gt; &lt;div style=&quot;height: 30px; width: 20px; background: #A91111; display: inline-block;&quot;&gt;&lt;/div&gt;&lt;/div&gt; 12#parent&#123;text-align: center;&#125;.son&#123;display: inline-block;&#125; /*改为行内或者行内块级形式，以达到text-align对其生效*/ 优点：简单，容易理解，兼容性非常好 缺点：只对行内内容有效；属性会继承影响到后代行内内容；块级改为inline-block换行、空格会产生元素间隔 position原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的 123456789101112131415#parent&#123;height: 200px;width: 200px; /*定宽*/position: relative; /*父相*/background-color: #f00;&#125;#son&#123;position: absolute; /*子绝*/left: 50%; /*父元素宽度一半,这里等同于left:100px,相当于把子div左边缘移到了父元素的中间位置*/transform: translateX(-50%); /*自身宽度一半,等同于margin-left: -50px;*/ 这里再往回(左)移动子div的一半width: 100px; /*定宽*/height: 100px; // 定高background-color: #00ff00;&#125; 优缺点: 优点：使用margin-left兼容性好；不管是块级还是行内元素都可以实现 缺点：代码较多；脱离文档流；使用margin-left需要知道宽度值；使用transform兼容性不好（ie9+） 12345transform: none|transform-functions;transform:translateX(-50%); //表示沿X轴向左移动自身元素宽度的一半rotate(21deg); // 表示顺时针旋转21度 参考——&gt;https://www.w3school.com.cn/cssref/pr_transform.asp 任意个元素（flex）1234#parent &#123; display: flex; justify-content: center;&#125; 优缺点： 优点：简单，易理解 缺点：PC端兼容性不好 总结1234text-align: center;（子元素设置为display: inline/inline-block）margin: 0 auto;子绝父相；flex（考虑兼容）；]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[外边距margin-学习笔记]]></title>
    <url>%2F2019%2F08%2F19%2F%E5%A4%96%E8%BE%B9%E8%B7%9Dmargin-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[值： [&lt; length &gt; | &lt; percentage &gt; | auto ] {1,4} | inherit初始值：未定义百分数：相对于父元素的width计算 12h1 &#123;margin: 10px 20px 15px 5px&#125; top right bottom left. 从上（top）开始围着元素顺时针旋转。单位：px in em ex等等。 值复制：以下两种写法效果一样12p &#123;margin: 0.25em 1em 0.25em 1em&#125; p &#123;margin: 0.25em 1em&#125; 若缺left ———&gt; 使用right的值 若缺bottom ———&gt; 使用top的值 若缺right ———&gt; 使用top的值 margin合并现象相邻margin会发生合并现象，两个margin中较小的一个会被较大的一个合并。 若是正的，margin取两个的最大值 若是负的，则取绝对值的最大值 若一正一负，正margin-负margin的绝对值，+margin-|-margin|]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS-盒子模型]]></title>
    <url>%2F2019%2F08%2F19%2FCSS-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[温故知新。本篇为《CSS权威指南》的学习笔记@[toc] 盒子模型是什么CSS盒子模型是最重要的一个概念，话不多说，先上图。如图所示，盒子四周（上下左右）分别都有对应的 外边距 margin 边框 border 内边距 padding 中间内容部分有width和height 这就是盒子模型所有的组成部分，可以想象一个包装精美的月饼来辅助理解。 一般，一个元素的width被定义为从左内边界到右内边界的距离，height则是从上内边界到下内边界的距离。【对应图片看-图上有指示】width影响的是内容区的宽度，而不是整个可见的元素框。 整个元素可见如上图，width影响的是浅蓝色区域的宽度 水平格式化有七个属性：==margin-left== border-left padding-left ==width== padding-right border-right ==margin-right==相加等于元素包含块的width,高亮的属性可以取值auto，其他默认为0 从某种程度说，可以用auto弥补实际值与所需总和的差距。eg:七个属性之和须等于400px12p &#123;margin-left: auto; margin-right: 100px; width: 100px&#125; // auto = 400-100-100=200,若设置的三个值之和≠400，则会强制把margin-right重置为auto(从左向右读的语言如英语) 垂直格式化同样有七个属性：==margin-top== border-top padding-top ==height== padding-bottom border-bottom ==margin-bottom==相加等于元素包含块的height，高亮的属性可设置为auto，其他默认为0 可是。。如果将一个元素的上下外边距都设置为auto，实际上它们都会重置为0，使元素框没有外边距。 auto以上，我们知道可以取auto的属性有： margin-top margin-right margin-bottom margin-left height width 在水平方向上，会自动“补齐”。但是在垂直方向上,大有文章。 1若设置height: auto，有无padding\border其height不同。 什么意思呢？看例子： 第一个例子123&lt;div style=&quot;height: auto; background: silver;&quot;&gt; &lt;p style=&quot;margin-top: 2em; margin-bottom: 2em;&quot;&gt;a paragraph!&lt;/p&gt;&lt;/div&gt; 高度仅仅是文本内容的高度! 第二个例子如果块级元素里面有==内边距==、==边框==等，高度和上个例子有区别。123&lt;div style=&quot;height: auto; border-top: 1px solid; border-bottom: 1px solid; background: silver;&quot;&gt; &lt;p style=&quot;margin-top: 2em; margin-bottom: 2em;&quot;&gt;Another Paragraph!&lt;/p&gt;&lt;/div&gt; 高度=文本内容21px+(margin-top)32px +(margin-top) 32px = 85px]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git连接github提示Permission denied (publickey)]]></title>
    <url>%2F2019%2F07%2F29%2Fgit%E8%BF%9E%E6%8E%A5github%E6%8F%90%E7%A4%BAPermission-denied-publickey%2F</url>
    <content type="text"><![CDATA[一、问题使用git连接github可能会出现Permission denied (publickey)问题。 使用命令：ssh -T git@github.com 错误： Permission denied (publickey) 二、排查原因1、检查之前是否配置git config user.name git config user.email 2、使用命令查看原因ssh -T -v git@github.com 发现是没有找到“id_rsa”等文件 3、查看文件ls ~/.ssh 检查有无1中的文件 若无，生成SSH密钥并在github中配置。参见： SSH密钥 生成SSH密钥连接github 若有，检查id_rsa.pub文件中的末尾email和git是否一致，不一致，重新生成。 （经检查发现有这一文件，但是email不一致，所以我重新生成并设置了SSH密钥解决了问题 三、连接ssh -T git@github.com 如果提示如下，说明连接成功 Hi Catherine-G! You&#39;ve successfully authenticated, but GitHub does not provide s hell access. 四、总结就像电脑出现问题重启、重装，github连接不成功，重新生成SSH密钥就可以啦。]]></content>
      <categories>
        <category>错误集锦</category>
      </categories>
      <tags>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对RESTful接口的理解]]></title>
    <url>%2F2019%2F07%2F22%2F%E5%AF%B9restful%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[RESTful 实习中的公司实现了前后端分离，后端会给前端接口文档，根据这份文档前后端各自进行开发，然后就发现HTTP请求的动词很统一，不外乎就是“GET、POST、DELETE、PUT”，在请教了小姐姐小哥哥之后发现组内开发的接口风格叫RESTful，所以就来学习一下。 前端的设备多种多样，为了方便不同的前端设备和后端进行通信，必须有一种统一的机制。目前最流行的是restful风格接口。 RESTful架构是目前最流行的一种互联网软件架构。符合以下三点要求的便是RESTful架构 1、每一个URI代表一种资源2、客户端和服务器之间，传递这种资源的表现层3、客户端通过四个HTTP动词对服务器端资源进行操作，实现“表现层状态转化” HTTP动词 GET 从服务器取资源 POST 在服务器新建一个资源 PUT 更新资源（客户端提供完整资源） PATCH 在服务器更新资源（只提供可改变的属性） DELETE 从服务器删资源 HEAD 获取资源的元数据OPTIONS 获取信息（只关于那些客户端可改变的） 状态码 200 OK - [GET]：服务器成功返回用户请求的数据201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功202 Accepted - []：表示一个请求已经进入后台排队（异步任务）204 NO CONTENT - [DELETE]：用户删除数据成功400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作401 Unauthorized - []：表示用户没有权限（令牌、用户名、密码错误）403 Forbidden - [] 表示用户得到授权（与401错误相对），但是访问是被禁止的404 NOT FOUND - []：用户发出的请求针对的是不存在的记录，服务器没有进行操作406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功 restful风格接口的好处：接口名称相同,请求method,通过 RequestMethod.GET/POST/PUT/DELETE来区别,就可以实现增删改查。 总结： 满足以上所说的原则和条件的接口就是RESTful。 这种风格的接口很统一，对于前端来讲非常方便。 目前我对restful的理解就这么多啦，有不当之处还请大家多多指正！ 小吐槽：发现有些后端同学很喜欢用POST，不论是什么接口都是POST，无语=.= 参考文档：[1] restful最佳实践[2] restful [3] restful API设计]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>编程规范</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react用link实现搜索条件]]></title>
    <url>%2F2019%2F07%2F22%2Freact%E7%94%A8link%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E6%9D%A1%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[在页面上方使用四个link来控制页面内容的条件展示，可展示不同搜索条件下的内容。可用js实现首先在状态机里定义： stateArr: [ {&apos;id&apos;:1,&apos;state&apos;:false}, {&apos;id&apos;:2,&apos;state&apos;:false}, {&apos;id&apos;:3,&apos;state&apos;:false}, {&apos;id&apos;:4,&apos;state&apos;:false}, ], 点击link时调用onclick方法，在该方法内判断参数id【此处传递参数1、2、3、4来表示四个link】 if(stateArr[num-1].state == false){ const params = { id: id, }; dispatch({ type: &apos;list/getList&apos;, payload: params, }); stateArr[num-1].state= true; }else{ // todo 展示全部list stateArr[num-1].state= false; }]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[北京地区美食分析报告]]></title>
    <url>%2F2019%2F07%2F22%2F%E5%8C%97%E4%BA%AC%E5%9C%B0%E5%8C%BA%E7%BE%8E%E9%A3%9F%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[北京地区美食分析报告一、报告背景美团网上的北京地区美食商家很多，对于一个小吃货来讲，找到性价比最高、最符合个人口味的美食就非常重要啦。 二、报告目的针对美团网北京市地区美食商家： 1、不同区域商家的商家数量、评论数量、种类分布、价格和评价如何？ 2、不同种类商家的商家数量、评论数量、区域分布、价格和评价如何？ 3、连锁店的门店数量、种类分布、区域分布、评论数量和价格如何？ 4、评论人数最多的10家店？价格最高的10家店？ 三、数据来源、数量等基本情况美团网以“北京市”和“美食”为关键字筛选商家，使用爬虫工具八爪鱼采集器共收集到北京地区的美食商家信息共1024条，去除重复的数据后剩余883条，主要字段包括：店铺名称、店铺网址、评分、消费评分、消费人数、类型、店铺地址、人均价格、所在城市、关键字。 四、数据处理 原数据 首先进行数据清洗包括删除字段店铺网址、所在城市和关键字；把店铺名称中括号中的内容去掉（用(*)匹配替换方法）；把消费评论数改为消费评分且仅留下数字；消费人数和人均价格只留下数字；店铺地址仅具体到区级（使用LEFT函数），合理填写人均价格一列的缺失值。 数据清洗后的数据 五、分页图表内容及本页结论1、分析商家信息使用数据透视图分析总共有554个商家，拥有两家及以上的连锁店共106个。 2、分析店铺地址使用数据透视表和数据透视图可以看到，美食商家分布在15个区（少了北京市的平谷区，大概是因为平谷区较为不发达所以美食较少），其中朝阳区和海淀区占了大部分。 3、分析美食商家类型在美食类型中，种类高达125种（多元的北京，汇聚了各地的美食），其中占比最多的是蛋糕，其次为北京菜、重庆火锅、韩国菜、日式寿司、老北京火锅、烤鸭等。 ​ 美食类型分析 4、各个区的商家种类数量各个区的商家种类数量同时也是各个区的美食种类，可以看到朝阳的美食种类遥遥领先，在朝阳可以吃到更多品类的食物。 5、各区平均价格 各区的平均价格如上图所示，东城、朝阳、西城的均价都在100左右。 6、各区平均评价得分 延庆、门头沟的平均得分很高，可能是因为这两个区爬取到的数据量少的原因。 7、不同种类商家的分布情况 可以看到商家数量越多，分布区域越广。 8、不同种类商家平均得分、平均价格、消费人数此处认为消费人数大于1000才有参考价值，可以看到炸酱面消费人数很多且得分为满分，看来老北京炸酱面深得消费者心。此外还有杭帮菜、自贡盐帮菜、德国菜、江湖菜评分很高，可以去尝试。 如果按消费人数来排序，如下图所示，火锅出现多次包括老北京火锅、重庆火锅、虾蟹火锅等，消费人数遥遥领先。 如果按价格来排序，从下图中可以看到，价格高的多是西餐、日料等。 如果按价格升序排列，则如下图所示，多是一些价格亲民的小吃。 如果预算在70-80左右，可以吃到什么呢？如下图所示，各种火锅是你的不二选择！ 9、连锁店的分布、美食种类等分析爬取的数据中，共有106个连锁品牌，共有435家连锁店铺。 分布在14个区中，其中在朝阳和海淀占了一半多，结合北京市统计局的各区常住人口统计结果可知，连锁店分布区域符合常住人口比例。 那么连锁店的种类有哪些？ 可以看到，连锁商家的种类丰富，包括蛋糕、北京菜、日式寿司、火锅、韩国菜、披萨、烤鸭等。 由上图可以看到，味多美的连锁店最多，村上一屋也较多。 连锁店的评价人数、价格和评分情况如图所示，总的评价人数为731349人，均分4.21，均价78. 各个连锁店的表现，连锁店的得分、消费人数、价格如下图所示，阿芮烤鸡爪、火齐潮汕砂锅粥、1516串串香、四季大盘涮肉园等四家连锁店表现很好。 10、消费人数TOP10 11、价格TOP15从下图中可以看出价格高的美食类型多为蛋糕、西餐、日料，均在200以上，这符合实际。 一个有意思的现象出现了，价格最高的美食店分布在朝阳、东城、西城和海淀，海淀仅有一家蛋糕店排在前15，而在北京市统计局的北京市宏观经济与社会发展基础数据库中（http://43.254.24.2/ww/MenuItemAction!queryMenu）查询到2018年各区地区生产总值如图所示，可以看到，排名前四的为海淀、朝阳、西城和东城。这符合我们所查询到的美食价格高的地区分布。海淀的生产总值最高，但是美食店只有一家上榜TOP15，这是不是有点不符合实际呢？那我们再来选取TOP50的美食店铺看看。 如图所示： 选取TOP50的价格最高的美食商家，分布前四位的有朝阳、东城、西城和海淀，这和各区生产总值相符，那为什么朝阳的高端美食遥遥领先呢？在此猜想，是由于朝阳区的金融业较为发达，金融白领们喜欢去高大上的地方用餐。还是要提一下海淀区的朋友们很低调。 12、评分TOP100此处认为评价人数大于1000才有参考意义，故选取评价人数在1000以上的按照得分、评价人数和均价来排序的TOP100商家数据。 top28截图 在地区分布上，可以看到朝阳区和海淀区占了多半。 在类型中，可以看到美食种类较为丰富，老北京火锅、北京菜、日式寿司、东北菜等很受欢迎。 六、总结连锁店的评分均在3分以上，性价比较高；在朝阳区和海淀区可以吃到品类更多的美食，同时老北京火锅和北京菜评分很高，可以尝试；追求高大上的用餐环境可以选择朝阳区。 七、下一步策略或对趋势的预测或不足1、因以“美食”为关键词的搜索结果仅有这么多条，与事实相比存在偏差，今后应抓取更多数据来分析； 2、数据处理中对相同种类的美食数据进行合并，如火锅的种类有火锅、重庆火锅、特色火锅等，应把这些统一为火锅。 参考文献： http://43.254.24.2/query/queryTopicListForExterData?yhid=guest&amp;subjectTypeCode=0&amp;isxbb=0# 北京市统计局数据（2018各区地区生产总值、2018各区常住人口）]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[antd路由跳转]]></title>
    <url>%2F2019%2F07%2F22%2Fantd%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[带“？”形式的跳转类似于“http://xxx:8000/list?id=1” 1&lt;Link to='/list?id=1'&gt;跳转链接&lt;/Link&gt; 在被跳转的页面中获取到参数“1” 123456789101112131415161718192021componentDidMount()&#123; this.handleList();&#125;handleList = () =&gt;&#123; const &#123;dispatch,location&#125; = this.props; const &#123;pages&#125; = this.state; // location.search得到的结果是&quot;?id=1&quot;， let type = location.search.charAt(&apos;4&apos;);//1 const params = &#123; id: type?type:null, pageNum: pages.page, pageSize: pages.size, startRow: 1, &#125;; dispatch(&#123; type: &apos;api/getList&apos;, payload: params, &#125;); type=null;&#125; 带“/”形式的跳转1.在router.config.js文件中配置子路由，指向文件和父路由中的完全一致。 123456&#123; path: '/list/:id', name: 'APIlist', hideInMenu: true, component: './List/CardList', &#125;, 2.跳转 1&lt;Link className=&#123;styles.link&#125; to=&#123;&#123;pathname:&apos;/list/1&apos;&#125;&#125;&gt;跳转&lt;/Link&gt; 3.被跳转的页面中获取到id 1const id = this.props.match.params.id; 然后拼接好params发起dispatch 用router跳转1router.push(&#123; pathname: &apos;/list/&apos; + id &#125;)； 参考： react-router API 简书 JS window location]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ant design</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建Blog]]></title>
    <url>%2F2018%2F10%2F02%2FHexo%2F</url>
    <content type="text"><![CDATA[一直有搭建blog的想法，以前都是零散的记录在各个地方，现在终于有一个统一记录的地方啦✿✿ヽ(°▽°)ノ✿ 网上可供参考的文字已经很多很多啦，在这主要贴两个 SunYan’s Blog 建留言板 当然还有其他的网站~~ 感谢分享！以后争取周更！顺便挖个坑： 美化blog 最近还要努力读文献写作业看视频…ヾ(◍°∇°◍)ﾉﾞ]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习markdown]]></title>
    <url>%2F2018%2F10%2F02%2F%E5%AD%A6%E4%B9%A0markdown%2F</url>
    <content type="text"><![CDATA[一级标题二级标题三级标题 列表1 列表2 a 子列表1 b 子列表2 列表3 我的CSDN链接 字体是斜的 字体加粗 引入代码行,切换为英文状态，点tab键：&lt;html&gt;&lt;/html&gt; 1234567&lt;html&gt; &lt;head&gt; &lt;title&gt;标题&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 引用 这是引用啦]]></content>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2018%2F10%2F02%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[《劝学》朱熹 少年易老学难成，一寸光阴不可轻。 未觉池塘春草梦，阶前梧叶已秋声。]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
